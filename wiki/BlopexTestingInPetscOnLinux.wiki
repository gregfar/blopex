#summary BLOPEX in PETSc Version 3.0.0-p5 testing for Linux
<wiki:toc max_depth="1" />

= Introduction =

Testing BLOPEX in PETSc Version 3.0. 0-p5 and system configuration:
  * Intel(R) Pentium(R) ,4 CPU ,3.06GHz,3.24 GB of RAM
  * Operation system: linux (Fedora release 9.90.1)
  * Lapack:Intel® Math Kernel Library (Intel® MKL) 10.1.1.019
   
= Setup PETSc =  

To test BLOPEX in PETSc, we need to download PETSc Release Version 3.0.0-p5 from  http://www.mcs.anl.gov/petsc/petsc-2/download/index.html. Install PETSc as follows ( you can see the installation from http://www.mcs.anl.gov/petsc/petsc-2/documentation/installation.html):

Extract PETSc files from download file.
{{{
$ gunzip -c  petsc-3.0.0-p5.tar.gz |  tar -xof-
}}}
This creates files in directory petsc. Next,change  directory to petsc-3.0.0-p5.
{{{
$ cd petsc-3.0.0-p5
}}}

Set two environment variables : PETSC_DIR ( location of the PETSc installation ) and PETSC_ARCH 
{{{
$ PETSC_DIR=$PWD
$ export PETSC_DIR
$ PETSC_ARCH=linux-gnu-c-debug
$ export PETSC_ARCH
}}}
Note: one might want to set PETSC_DIR and PETSC_ARCH variables in the .bashrc file.

Now configure PETSc: 
{{{
$ ./config/configure.py  --with-lapack-libs="mkl_lapack mkl guide pthread" --with-lapack-lib-dirs=/opt/intel/mkl/10.1.1.019/lib/em64t --with-scalar-type=complex
}}}

The command line parameters specify the Lapack library. After configuration is finished ,issue the command
{{{
$ make all test  
or
$make all
$make test
}}}


= Execution of Tests  =

There are two test drivers located in subdirectories of blopex_petsc: driver an driver_fiedler.You can 
get the  source code from http://code.google.com/p/blopex/ 

To do this execute “make clean” and then “make” under /blopex_petsc 

==Test for driver==
Find 5 first eigenpairs, random initial guess: 
{{{
$./driver -n_eigs 5 -tol 1e-6 -itr 50


Eigenvalue lambda       Residual              

2.4304215831301618e-01  2.3030612172213970e-07

4.7952103987972172e-01  8.1402956217023122e-07

4.7952103987982675e-01  8.1131970310505895e-07

4.7952103988006367e-01  8.0140477867037484e-07

7.1599992144665969e-01  7.3264033542117715e-07



17 iterations

Solution process, seconds: 1.029493e+00

}}}


==Tests for  driver_fiedler==

driver_fiedler accepts as input matrices in Petsc format. 
For our tests we use L-matrix-complex.petsc and DL-matrix-complex.petsc (with imag part zero) plus test_complex1.petsc (40x40 134 nz hpd random),test_complex2.petsc (1000x1000 50786 nz hpd random) and test_complex3 (10876 nz hpd random)

We first run driver_fiedler for the matrix provided in _DL-matrix-complex.petsc_.

find 5  first eigenpairs, random initial guess: 
{{{
$./driver_fiedler -matrix DL-matrix-complex.petsc -n_eigs 5 -itr 100


Eigenvalue lambda       Residual              

4.0146004012130741e-05  3.4389708241937716e-06

4.0189110450839925e-05  3.0371908917302614e-06

4.0221387104061466e-05  3.3803264121621566e-06

4.0279341832363446e-05  9.7319453933449522e-06

4.0376413372594436e-05  1.0126019383757318e-05



100 iterations

Solution process, seconds: 9.833632e+01

Final eigenvalues:

4.014600e-05

4.018911e-05

4.022139e-05

4.027934e-05

4.037641e-05


}}}

Now we run similar tests for the matrix provided in _L-matrix-double.petsc_.  First 3 eigenpairs, the initial guess is random, 20 iterations:
{{{
$./driver_fiedler -matrix L-matrix-complex.petsc -n_eigs 3 -itr 20

.........
Eigenvalue lambda       Residual              

3.2405722985591261e-06  4.7109303081302268e-09

9.4602268953572009e-06  6.0667249943905242e-09

2.0138053682099526e-05  5.1658595320447995e-09



15 iterations

Solution process, seconds: 2.570212e+03

Final eigenvalues:

3.240572e-06

9.460227e-06

2.013805e-05

}}}