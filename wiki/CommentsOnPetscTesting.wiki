#summary Comments on Blopex Testing in Petsc
<wiki:toc max_depth="3" />

= How Petsc works with Blopex =

First lets review how Blopex is incorporated into Petsc.
There are two components:  blopex_abstract and blopex_interface.
The blopex_abstract is incorporated as an external package.  

This can be specified during configuration with the option "--with-blopex=1" 
in which case "blopex_abstract_Aug_2006.tar.gz" is ftped from the http://ftp.mcs.anl.gov/pub/petsc/externalpackages/ site.

It can also be specified during configuration with the option "--download-blopex=/PATH/TO/package.tar.gz" if already downloaded and saved locally.
For example: I have created a zipped tar file on my system with the blopex_abstract files and called it /home/grads/dmccuan/blopex_petsc_abstract.tar.gz.  To use this I would specify the configuration option {{{--download-blopex=$HOME/blopex_petsc_abstract.tar.gz}}}

In either case under the $PETSC_DIR directory a subdirectory "externalpackages/blopex_abstract" will be created and the files from the tar installed there, compiled, and then the header files moved to $PETSC_DEV/$PETSC_ARCH subdirectory /include, the object files moved to /lib,  and the BLOPEX library created and moved to /lib/libBLOPEX.a. Note that on xvia $PETSC_ARCH=linux-gnu-c-debug.  Also, note that if externalpackages/blopex_abstract already exists from a previous configuration, it will not be replaced with what your configuration specifies.

All of this happens during the configuration step.

Now the blopex_petsc interface files which include the drivers and petsc-interface are not a part of the blopex_abstract tar.  These files are included as part of the petsc distribution tar and are located in $PETSC_DIR/src/contrib/blopex.

Configuration in Petsc is controlled via python scripts. The script petsc-dev/config/PETSc/packages/blopex.py contains flags to control configuration when the --download-blopex option is used.  It contains the following line (about line 15) "self.complex    = 0".  This specifies that the blopex interface is not defined for Petsc scalar type complex.  Edit blopex.py and change this to "self.complex    = 1". Without this change configuration will give the error _"cannot use blopex with complex numbers it is not coded for this capability"_.  Warning: On some systems (Frost) the configuration will abort when you get this message, but on others (Linux) it doesn't and while you can continue with the make you will get bad results with the complex tests.

These are the flags that must be set if blopex is compatible with complex and 64bit data types.
{{{
configure option --with-scalar-type=complex requires flag self.complex = 0.
configure option --with-64-bit-indices requires flag self.requires32bitint = 0.
}}}

Note that version 1.0 of Blopex does not support these options.  They are new for version 1.1.

After the petsc configuration step when you do a "make all test"; the petsc-interface.c gets compiled and the object saved in libpetsc.a which is located in $PETSC_DEV/$PETSC_ARCH/lib.  Note: prior to Petsc 3.1 it was saved in libpetscksp.a.

Note that the drivers are not compiled in this step.  Now the driver can be compiled and linked by changing to the drivers subdirectory and executing the make (for example: in src/contrib/blopex/driver execute "make driver").

= Testing Petsc with BLOPEX changes =

The changes needed to incorporate a new release of BLOPEX into PETSC are defined in two tar files.
{{{
 http://blopex.googlecode.com/files/blopex_petsc_abstract.tar.gz
 http://blopex.googlecode.com/files/blopex_petsc_interface.tar.gz
}}}

To setup PETSC perform the following steps:

 # Download the latest PETSC distribution tar file form the Petsc download site (for example: "petsc-lite-3.1-p2.tar.gz" )
 # Extract the tar file using:  "tar -zxvf petsc-lite-3.1-p2.tar.gz"
 # Download the blopex_petsc_abstract.tar.gz and blopex_petsc_interface.tar.gz from the Google code site
 # Change to the petsc directory: "cd petsc-3.1-p2"
 # Install the blopex_petsc_interface changes: "tar -zxvf $HOME/blopex_petsc_interface.tar.gz"
 # The blopex_petsc_interface tar contains an edited version of blopex.py to allow for complex scalars and 64bit integers, so you don't have to edit the blopex.py file.
 # Then configure PETSC using the "--download-blopex" option as described above with the blopex_petsc_abstract.tar.gz.  Follow this with a "make all test" and then make and execute the drivers.
 
*This setup script will work well for most Linux, GNU, Lapack systems.  Other systems can be more complicated.  Refer to the Wiki's for details.*

= 64bit testing =

If you are going to test with Petsc configured for 64bit integers, you should be aware of the following:

 # You use the option `--with-64-bit-indices` to configure Petsc.  The type `PetscInt` will be defined with the interger type your compiler needs for 64bit integers (usually `long long`).
 # Petsc configuration won't allow you to do this with blopex unless blopex.py (see above) has the following line added after "self.complex =1"; "self.requires32bitint = 0". This tells the configurator that blopex is coded to use 64bit integers (or 32bit). 
 # We want the Petsc abstract, interface, and driver code to be compiled with 64bit integers.  This is accomplished by having a special version of fortran_options.h which includes "petsc.h" (where `PetscInt` is defined) and forces our preprocessor variable `BlopexInt` equal to `PetscInt`.  This is the same approach that we have for HYPRE.  The Petsc version of fortran_options.h is in "blopex_petsc/utilities/".
 # In driver_fiedler.c matrices are read in a Petsc Format.  These files can be created by matlab pgms (see m files in source directory blopex_petsc).  When created integers are written as either 32bit or 64bit.  This must match with the definition of `PetscInt`.  Consequently, both 32bit and 64bit versions of our test files are needed.  The 64bit versions contain "_64" in the file name.

= An alternative testing method for developers =

If you have all of done this before you know it takes a very long time to do the configure and "make all test".  Remember this compiles the petsc-interface.c.  If you are making changes to the interface or to the abstract code, this can become very tedious.  

<font color=blue>
A different method of testing, described below, is primarily to help future developers. 
Perhaps you have noticed there is both a Makefile and a makefile in the blopex_petsc directories.  The lowercase makefile is used by PETSC.  The uppercase Makefile is used to compile and link the petsc-interface and drivers when the code is located externally to PETSC, such as in our source downloaded from Google.  This Makefile requires PETSC to be installed but not necessarily "--download-blopex" since we link with the blopex_abstract library that is compiled externally.  So, you can make changes and quickly test them without reinstallation of PETSC. 

Note that if you are in the external directory and specify "make" it will execute the lowercase makefile, which is not correct.  Instead use "make -f Makefile".  Also, note in the driver files (driver.c, driver_fiedler.c, etc.) there is an include for header file petsc-interface.c.  If executing a make from within PETSC this has to be hard coded to the subdirectory for petsc-interface but if external this subdirectory is different.  To handle this without changing the code I have incorporated some preprocessor code within the Makefile's and the driver--.c files. 
</font>