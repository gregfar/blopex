#summary Comments on Blopex Testing in Petsc

First lets review how Blopex is incorporated into Petsc.
There are two components:  blopex_abstract and blopex_interface.
The blopex_abstract is incorporated as an external package.  

This can be specified during configuration with the option "--with-blopex=1" 
in which case "blopex_abstract_Aug_2006.tar.gz" is ftped from the ftp.mcs.anl.gov site, see also http://ftp.mcs.anl.gov/pub/petsc/externalpackages/blopex_abstract_Aug_2006.tar.gz

It can also be specified during configuration with the option "--download-blopex=/PATH/TO/package.tar.gz" if already downloaded and saved locally.
For example: I have created a zipped tar file on my system with the blopex_abstract files and called it /home/grads/dmccuan/blopex_abstract_Mar_2010.tar.gz.  To use this I would specify the configuration option {{{--download-blopex=/home/grads/dmccuan/blopex_abstract_Mar_2010.tar.gz}}}

In either case under the PETSC_DIR directory a subdirectory "externalpackages/blopex_abstract" will be created and the files from the tar installed there, compiled, and then the header files moved to $PETSC_DEV/$PETSC_ARCH subdirectory /include, the object files moved to /lib,  and the BLOPEX library created and moved to /lib/libBLOPEX.a. Note that on xvia $PETSC_ARCH=linux-gnu-c-debug.

All of this happens during the configuration step. 

Now the blopex_petsc interface files with include the drivers and petsc-interface are not a part of the blopex_abstract tar.  These files are included as part of the petsc distribution tar and are located in $PETSC_DIR/src/contrib/blopex.  

After the petsc configuration step when you do a "make all test"; the petsc-interface.c gets compiled and the object saved in libpetscksp.a which is located in $PETSC_DEV/$PETSC_ARCH/lib.  

Note that the drivers are not compiled in this step.  Now the driver can be compiled and linked by changing the drivers subdirectory and executing the make (for example: in src/contrib/blopex/driver execute "make driver").

The changes needed to incorporate a new release of BLOPEX into PETSC are defined in two tar files.

 # http://blopex.googlecode.com/files/blopex_abstract_Mar_2010.tar.gz
 # http://blopex.googlecode.com/files/blopex_petsc_interface.tar.gz

Extract the latest PETSC distribution tar file and then copy the blopex_petsc_interface.tar.gz into its src/contrib/blopex subdirectory and extract it using "tar -zxvf blopex_petsc_interface.tar.gz".  Then configure PETSC using the "--download-blopex" option as described above with the blopex_abstract_Mar_2010.tar.gz.  Follow this with a "make all test" and then make and execute the drivers. 

If you have done this before you know it takes a very long time to do the configure and "make all test".  Remember this compiles the petsc-interface.c.  If you are making changes to the interface or to the abstract code, this can become very tedious.  

<font color=blue>
A different method of testing, described below, is primarily to help future developers. 
Perhaps you have noticed there is both a Makefile and a makefile in the blopex_petsc directories.  The lowercase makefile is used by PETSC.  The uppercase Makefile is used to compile and link the petsc-interface and drivers when the code is located externally to PETSC, such as in our source downloaded from Google.  This Makefile requires PETSC to be installed but not necessarily "--download-blopex" since we link with the blopex_abstract library that is compiled externally.  So, you can make changes and quickly test them without reinstallation of PETSC. 

Note that if you are in the external directory and specify "make" it will execute the lowercase makefile, which is not correct.  Instead use "make -f Makefile".  Also, note in the driver files (driver.c, driver_fiedler.c, etc.) there is an include for header file petsc-interface.c.  If executing a make from within PETSC this has to be hard coded to the subdirectory for petsc-interface but if external this subdirectory is different.  To handle this without changing the code I have incorporated some preprocessor code within the Makefile's and the driver--.c files. 
</font>