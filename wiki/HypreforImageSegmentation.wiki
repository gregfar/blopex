#summary Performing Image Segmentation with Hypre

= Introduction =

The purpose of this page is to describe the steps involved in using the MATLAB image segmentation package in conjunction with Blopex in Hypre to solve image segmentation eigenvalue problems.


== Preliminaries == 

The basic system info:

{{{
>> uname -a
Linux xvia.cudenver.edu 2.6.27.41-170.2.117.fc10.x86_64 #1 SMP Thu Dec 10 10:36:29 EST 2009 x86_64 x86_64 x86_64 GNU/Linux
}}}

== Hypre Installation ==

For detailed instructions on installing Hypre consult the wiki page http://code.google.com/p/blopex/wiki/InstallingHypreDetailedInstructions.

For this example Hypre is compiled using Mpich2 and already existing BLAS/Lapack libraries. Also, the file ij.c in the Hypre test directory is replaced with one that eases the use of constraints when running the program. In the original file the constraint parameter searches for the Hypre files named 'vector' in the test directory, which is also the file that is written to when specifying the -vout parameter. To avoid any hazards or annoyances that could result from this, the modified file searches for the Hypre files named 'constraints'. Note that this swap must occur before Hypre is compiled.     

The complete setup for the installation used here is as follows:

{{{
>> tar xzvf hypre-2.6.0b.tar.gz
>> mv hypre-2.6.0b hypre-2.6.0b_mpich2.2
>> cd hypre-2.6.0b_mpich2.1/src
>> wget http://blopex.googlecode.com/files/hypre_lobpcg_modifications.tar.gz
>> tar xzvf hypre_lobpcg_modifications.tar.gz
>> cd test; rm test_ij.c;
>> wget http://math.ucdenver.edu/~adougher/image_seg_test_replace/test_ij.c;
>> cd ..; mpd&
>> ./configure --with-lapack-libs="lapack blas" --with-lapack-lib-dirs="/usr/lib64"
>> make; make test
}}}

== MATLAB Image Segmentation Package ==

Next the Image Segmentation Package is downloaded from the Blopex google code site and decompressed in the MATLAB directory.  It is also convenient to create an 'images' subdirectory for storing the image files to be segmented.

{{{
>> wget http://code.google.com/p/blopex/downloads/detail?name=segmentation.tar&can=2&q=
>> tar -xvf segmentation.tar
>> mkdir images
}}}

Now MATLAB may be started and the code obtained from the package may be used to generate the graph Laplacian derived from an image and the constraint vector as follows:

{{{
>> matlab
>> [Mat,M,icm,dims]=img2laplacian('images/Structural.gif')
>> n=size(Mat)
>> matlab2hypreIJ(Mat,16,'/home/guests/adougher/hypre-2.6.0b_mpich2.2/src/test/constraints','16.15e')
>> matlab2hypreParVectors(ones(n(1),1),16,'/home/guests/adougher/hypre-2.6.0b_mpich2.2/src/test/constraints','16.15e')
}}}  

Note that all the return values are retrieved from the img2laplacian function and will be used when reconstructing the partitioned image later.  

At this point it is useful to open a second terminal to go to the Hypre test directory, which in this case the Hypre matrix and vector files were written to.  If an mpi daemon isn't running, it must be started before the eigenvalues/eigenvectors can be computed in Hypre:

{{{
>> cd hypre-2.6.0b_mpich2.1/src/test
>> mpd&  
}}} 

Now run the solver:

{{{
>> mpirun -np 16 ./ij -lobpcg -vrand 2 -tol 1e-12 -pcgitr 0 -itr 50 -seed 2 -solver 0 -fromfile structural -con -vout 1
}}}

Here -np 16 signifies the number of processors, -con specifies the use of the constraints which are in the test directory and -vout 1 specifies that the eigenvectors are to be written to hypre vector files. Once the iterations are complete, the resulting eigenvectors must be moved back to the MATLAB directory.  Note that all of the vector files thus generated must be moved back or the hypreParVectors2matlab( ) function will not work. 

Now, back in the MATLAB terminal, run the following:
{{{
>> v = hypreParVectors2matlab('vectors')
>> back_to_image
}}}

Here back_to_image is a modified segment_demo script, which uses the previous variables to carry out the conversion back into an image. With this the image has been segmented based on the computed fiedler vector and the segmented image has been written to a file along with an eigenvector image.  

Some examples of using this procedure can be found here:

http://math.ucdenver.edu/~adougher/images/