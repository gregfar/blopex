#summary BLOPEX in PETSc Release Version 3.0 testing for Linux
<wiki:toc max_depth="1" />

= Introduction =

Testing BLOPEX in PETSc Release Version 3.0. BLOPEX LOBPCG computes a number of smallest eigenpairs to the required tolerance of the residual norms. System configuration:
  * Fedora 10 OS, 4 Quad Core Opteron 2.0 Ghz CPUs, 64 GB RAM;
  * Open MPI version 1.2.4;
  * Compiler version gcc (GCC) 4.3.2 20081105 (Red Hat 4.3.2-7);
  * LAPACK version 3.1.1 

= Setup PETSc =  

Goto http://www.mcs.anl.gov/petsc/petsc-2/download/index.html and download PETSc Release Version 3.0 in the tarball petsc-3.0.0-p5.tar.gz (full distribution including all current patches).

Extract PETSc files from download file.
{{{
$ tar -zxvf petsc-3.0.0-p5.tar.gz
}}}
This creates files in directory  petsc-3.0.0-p5. Change working directory to petsc-3.0.0-p5.
{{{
$ cd petsc-3.0.0-p5
}}}
Setup environment variables PETSC_DIR (points to the location of the PETSc installation that is used) and PETSC_ARCH (specifies the configuration that should currently be used)
{{{
$ PETSC_DIR=/home/....../petsc-3.0.0-p5
$ export PETSC_DIR
$ PETSC_ARCH=linux-gnu-c-debug
$ export PETSC_ARCH
}}}
Note: one might want to set PETSC_DIR and PETSC_ARCH variables in the .bashrc file.

Now configure PETSc: 
{{{
$ ./config/configure.py --with-mpi-dir=/usr/include/openmpi --download-hypre=1 --download-blopex=1
}}}
The command line parameters specify the path to the existing MPI directory and issue the command to download (and compile) hypre and BLOPEX during configuration process.

After configuration is finished issue the command
{{{
$ make all test
}}}
which builds PETSc libraries and runs sample tests to make sure the installation was correct.

= Execution of Tests  =
==Tests for PETSc driver==
To execute tests shift from ${PETSC_DIR} to ${PETSC_DIR}\src\contrib\blopex\driver
and run the makefile:
{{{
make driver
}}}
This will create the executable driver which finds a specified (in the command line) number of smallest eigenpairs of 3-D 7-point Laplacian. 

Use 2 cores, find 10 first eigenpairs, random initial guess: 
{{{
$ mpirun -np 2 ./driver -n_eigs 10 -tol 1e-6 -itr 200
........
Eigenvalue lambda 2.4304215831301590e-01
Eigenvalue lambda 4.7952103987965222e-01
Eigenvalue lambda 4.7952103987965766e-01
Eigenvalue lambda 4.7952103987970601e-01
Eigenvalue lambda 7.1599992143805746e-01
Eigenvalue lambda 7.1599992144619695e-01
Eigenvalue lambda 7.1599992144630398e-01
Eigenvalue lambda 8.5230663763016457e-01
Eigenvalue lambda 8.5230663763709180e-01
Eigenvalue lambda 8.5230663765184977e-01
Residual 1.3183602919392247e-07
Residual 5.9979439430902086e-07
Residual 5.4559315359147639e-07
Residual 4.9379920928183627e-07
Residual 4.8109848170987495e-07
Residual 8.3978161394734631e-07
Residual 4.4588467532366059e-07
Residual 9.3239422434229350e-07
Residual 6.1192221873950216e-07
Residual 5.6269915469891603e-07

16 iterations
Solution process, seconds: 6.937249e-01
}}}

Below are the similar runs and corresponding timings on 4 and 8 cores:
{{{
$ mpirun -np 4 ./driver -n_eigs 10 -tol 1e-6 -itr 200	
........
Eigenvalue lambda 2.4304215831301609e-01
Eigenvalue lambda 4.7952103987964723e-01
Eigenvalue lambda 4.7952103987964978e-01
Eigenvalue lambda 4.7952103987965394e-01
Eigenvalue lambda 7.1599992144629654e-01
Eigenvalue lambda 7.1599992144633229e-01
Eigenvalue lambda 7.1599992144649582e-01
Eigenvalue lambda 8.5230663765087544e-01
Eigenvalue lambda 8.5230663765162695e-01
Eigenvalue lambda 8.5230663765199566e-01
Residual 1.2256928335876460e-07
Residual 1.3071948135818169e-07
Residual 2.5432995894762794e-07
Residual 5.5951055706474378e-07
Residual 7.8480018308669574e-07
Residual 6.0482968637130697e-07
Residual 7.4292163959793628e-07
Residual 5.9108874197533204e-07
Residual 7.3861840655450680e-07
Residual 8.6358994247931617e-07

18 iterations
Solution process, seconds: 6.384690e-01


$ mpirun -np 8 ./driver -n_eigs 10 -tol 1e-6 -itr 200	
........
Eigenvalue lambda 2.4304215831301576e-01
Eigenvalue lambda 4.7952103987947231e-01
Eigenvalue lambda 4.7952103987964712e-01
Eigenvalue lambda 4.7952103987968475e-01
Eigenvalue lambda 7.1599992143712676e-01
Eigenvalue lambda 7.1599992144629865e-01
Eigenvalue lambda 7.1599992144654767e-01
Eigenvalue lambda 8.5230663761501368e-01
Eigenvalue lambda 8.5230663765206005e-01
Eigenvalue lambda 8.5230663766406078e-01
Residual 6.6323381207132957e-08
Residual 8.6605306870725818e-07
Residual 1.8141975011743287e-07
Residual 4.8510079450305450e-07
Residual 5.7420349692513640e-07
Residual 2.3112126978246296e-07
Residual 8.2666208625825311e-07
Residual 7.6332717301989761e-07
Residual 8.8315729385366315e-07
Residual 7.4510612980311595e-07

18 iterations
Solution process, seconds: 7.573450e-01
}}}

In all the tests the desired tolerance for residual norms (1e-6) was achieved at each eigenpair.

==Tests for PETSc driver_fiedler==

To execute tests shift to ${PETSC_DIR}\src\contrib\blopex\driver_fiedler
and run the makefile:
{{{
make driver_fiedler
}}}
This will create the executable driver_fiedler which finds a specified (in the command line) number of smallest eigenpairs of the matrix provided in the input file (passed through -matrix option of the command line). In order to run tests for driver_fiedler one needs to make sure that the input file(s) are present in the ...\src\contrib\blopex\driver_fiedler directory.

For our tests we use L-matrix-double.petsc (65536x65536 diagonal values 0-4) and DL-matrix-double.petsc (65536x65536 tridiagonal values 0-4). The files provide matrices in PETSc format. One can obtain them by checking out the current BLOPEX source code from http://code.google.com/p/blopex/ - in the blopex_petsc/driver_fiedler directory.  

We first run driver_fiedler for the matrix provided in _L-matrix-double.petsc_.

Use 2 cores, find 10 first eigenpairs, random initial guess: 
{{{
$ mpirun -np 2 ./driver_fiedler -matrix L-matrix-double.petsc -n_eigs 10 -tol 1e-6 -itr 200
........
Eigenvalue lambda 3.2405768262489162e-06
Eigenvalue lambda 9.4602290898963036e-06
Eigenvalue lambda 2.0138053880582385e-05
Eigenvalue lambda 2.3958326669352264e-05
Eigenvalue lambda 2.7851501888639641e-05
Eigenvalue lambda 3.0573314132120754e-05
Eigenvalue lambda 3.0661937852478048e-05
Eigenvalue lambda 3.3856520783869970e-05
Eigenvalue lambda 3.5356691277536724e-05
Eigenvalue lambda 3.6961282276333839e-05
Residual 5.9690394531698627e-07
Residual 8.6378686291676788e-07
Residual 2.3666433686355192e-07
Residual 3.9337289375140117e-07
Residual 5.1936444112870076e-07
Residual 5.5836143273234891e-07
Residual 5.2964619345785693e-07
Residual 5.3972416498166818e-07
Residual 8.8196929246981103e-07
Residual 6.4863234848498941e-07

26 iterations
Solution process, seconds: 7.867606e+02
}}}

Below are the similar runs and corresponding timings on 4 and 8 cores:
{{{
$ mpirun -np 4 ./driver_fiedler -matrix L-matrix-double.petsc -n_eigs 10 -tol 1e-6 -itr 200
........
Eigenvalue lambda 3.2405734692307379e-06
Eigenvalue lambda 9.4602351936660370e-06
Eigenvalue lambda 2.0138055468855037e-05
Eigenvalue lambda 2.3958331984784186e-05
Eigenvalue lambda 2.7851501139206116e-05
Eigenvalue lambda 3.0573318597981141e-05
Eigenvalue lambda 3.0661944214603311e-05
Eigenvalue lambda 3.3856516470362675e-05
Eigenvalue lambda 3.5356655501822301e-05
Eigenvalue lambda 3.6961344523768659e-05
Residual 4.4789579136334083e-07
Residual 9.2333849129680743e-07
Residual 2.9503489444645887e-07
Residual 7.3564733188528120e-07
Residual 3.8399757736020965e-07
Residual 5.2877288885347509e-07
Residual 6.9591942218166180e-07
Residual 6.4698120906267475e-07
Residual 7.4099434452242377e-07
Residual 8.7424480127267835e-07

27 iterations
Solution process, seconds: 4.877129e+02


$ mpirun -np 8 ./driver_fiedler -matrix L-matrix-double.petsc -n_eigs 10 -tol 1e-6 -itr 200	
........
Eigenvalue lambda 3.2405756774021388e-06
Eigenvalue lambda 9.4602326453085735e-06
Eigenvalue lambda 2.0138066307769655e-05
Eigenvalue lambda 2.3958330209060284e-05
Eigenvalue lambda 2.7851529539876912e-05
Eigenvalue lambda 3.0573330092901635e-05
Eigenvalue lambda 3.0661950722208523e-05
Eigenvalue lambda 3.3856548176989874e-05
Eigenvalue lambda 3.5356665997127034e-05
Eigenvalue lambda 3.6961288581714983e-05
Residual 2.9450843503652977e-07
Residual 9.5175004970948052e-07
Residual 8.1326652381551751e-07
Residual 7.8931677086003327e-07
Residual 8.4516110791908858e-07
Residual 8.7364491923375588e-07
Residual 7.1567217914972564e-07
Residual 6.3510578793863129e-07
Residual 6.6514586012584391e-07
Residual 6.8152593031236764e-07

22 iterations
Solution process, seconds: 2.484992e+02
}}}

In all the tests the desired tolerance for residual norms (1e-6) was achieved at each eigenpair.

Now we run similar tests for the matrix provided in _DL-matrix-double.petsc_. Use 2, 4 and 8 cores to find first 3 eigenpairs, the initial guess is random, 100 iterations:

{{{
$ mpirun -np 2 ./driver_fiedler -matrix DL-matrix-double.petsc -n_eigs 3 -tol 1e-6 -itr 100

Eigenvalue lambda 4.0146737422344865e-05
Eigenvalue lambda 4.0189696215318528e-05
Eigenvalue lambda 4.0222121926433389e-05
Residual 4.2255997814547303e-06
Residual 3.6478813725532972e-06
Residual 3.9540969799958424e-06

100 iterations
Solution process, seconds: 1.096180e+01


$ mpirun -np 4 ./driver_fiedler -matrix DL-matrix-double.petsc -n_eigs 3 -tol 1e-6 -itr 100

Eigenvalue lambda 4.0146829375144881e-05
Eigenvalue lambda 4.0189781241342334e-05
Eigenvalue lambda 4.0222251817389663e-05
Residual 4.9084309631485366e-06
Residual 4.1964326098766522e-06
Residual 4.4807952509380482e-06

100 iterations
Solution process, seconds: 5.945665e+00


$ mpirun -np 8 ./driver_fiedler -matrix DL-matrix-double.petsc -n_eigs 3 -tol 1e-6 -itr 100

Eigenvalue lambda 4.0147125247326027e-05
Eigenvalue lambda 4.0190006140340819e-05
Eigenvalue lambda 4.0222502675617157e-05
Residual 3.3615193337144711e-06
Residual 2.8366516045747933e-06
Residual 3.0084484134423990e-06

100 iterations
Solution process, seconds: 3.914448e+00
}}}
